DS-Trees

Binary Tree = type of tree, each node O, 1, 2 Nodes, and each child can only have 1 parent

			Perfect Binary Tree = All nodes are full, each node has 2 children, Divide & Conquer
				Number of nodes doubles as you move down the tree 
				Number of nodes at the last level is equal to the sum of all other level(s) nodes + 1
				Height(h) refers to the total amount of levels in a tree, # of nodes = 2^h - 1
					log nodes = steps, log 100 = 2 (eg. 10^2 = 100)
			Big O
				lookup O(logN)
				insert O(logN)
				delete O(logN)

			Full Binary Tree = a node has either 0 or 2 children, but never 1 child

			Binary Search Tree = all child nodes to the right of the root node must be greater than the current node
								 node can only have up to 2 children

			Unbalanced Binary Search Tree = one side of the tree grows disproportionately to the other side
											causes O(n) for lookup, inserts and deletes
Pros & Cons
	+ Better than O(n)
	+ Ordered
	+ Flexible Size
	- No O(1) operations

AVL Tree = self balancing Binary Search Tree, 2 heights of 2 child subtrees of any node differ at most one
		   if at any time they differ by more than 1 rebalancing is done

Red-Black Tree = Each node of the binary tree has an extra bit, and that bit is often interpreted as the color 
				(red or black) of the node. These color bits are used to ensure the tree remains approximately 
				balanced during insertions and deletions.

Binary Heap = a complete binary tree which satisfies the heap ordering property. (used for Priority Queues)
			  The ordering can be one of two types:
				-the min-heap property: the value of each node is greater than or equal to the value 
				of its parent, with the minimum-value element at the root.
				-the max-heap property: the value of each node is less than or equal to the value of its 
				parent, with the maximum-value element at the root.
					Big O
						lookup O(n)
						insert O(logN)
						delete O(logN)

Trie = a kind of search tree—an ordered tree data structure used to store a dynamic set or associative 
	   array where the keys are usually strings. Unlike a binary search tree, no node in the tree stores
	   the key associated with that node; instead, its position in the tree defines the key with which 
	   it is associated. All the descendants of a node have a common prefix of the string associated with 
	   that node, and the root is associated with the empty string. 
